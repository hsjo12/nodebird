extends layout

block content
  .timeline
    if user
      div
        form#twit-form(action='/post' method='post' enctype='multipart/form-data')
          .input-group
            textarea#twit(name='content' maxlength=140)
          .img-preview
            img#img-preview(src='' style='display: none;' width='250' alt='미리보기')
            input#img-url(type='hidden' name='url')
          div
            label#img-label(for='img') 사진 업로드
            input#img(type='file' accept='image/*')
            button#twit-btn.btn(type='submit') 짹짹!
            
    .twits
      form#hashtag-form(action='/post/hashtag')
        input(type='text' name='hashtag' placeholder='태그 검색')
        button.btn 검색
      for twit in twits
        //- div
        //- - console.log("_!!!!!!!!!!!!!!!!!!!!!!!!!")
        //- - console.log(twit.id)
        //- - console.log("_!!!!!!!!!!!!!!!!!!!!!!!!!")
        //- div
        .twit
          input.twit-user-id(type='hidden' value=twit.user.id)
          input.twit-id(type='hidden' value=twit.id)
          .twit-author= twit.user.nick
          -const follow = user && user.Followings.map(f => f.id).includes(twit.user.id);
          if user && user.id !== twit.user.id && !follow
            button.twit-follow 팔로우하기
          else if  user && user.id !== twit.user.id && follow
            button.twit-unfollow 팔로우끊기
          .twit-content= twit.content
          if twit.img
            .twit-img
              img(src=twit.img alt='섬네일')

          // 게시글에 좋아요 누른 사람들의 아이디를 배열화 하고, 그 엘레멘트 중에 현재 로그인된 유저가 있는지 확인..
          -const like = user && twit &&twit.Liker && twit.Liker.map(f=>f.id).includes(user.id);
          // button.like 나 button.unlike 는 자바스크립트 부분에서 다시 명시해서 불러준다. queryselector 이부분..
          if user && !like
            button.like 좋아요
          else if user && like
            button.unlike 좋아요 취소
          // 로그인 여부 && 로그인 한 사람의 아이디 === 트위터 글 올린사람 아이디  
          if user && user.id === twit.user.id 
            // 버튼 생성
            button.delete 게시글 삭제
  script.
    if (document.getElementById('img')) {
      document.getElementById('img').addEventListener('change', function (e) {
        var formData = new FormData();
        console.log(this, this.files);
        formData.append('img', this.files[0]);
        var xhr = new XMLHttpRequest();
        xhr.onload = function () {
          if (xhr.status === 200) {

            var url = JSON.parse(xhr.responseText).url;
            document.getElementById('img-url').value = url;
            document.getElementById('img-preview').src = url;
            document.getElementById('img-preview').style.display = 'inline';
          } else {
            console.error(xhr.responseText);
          }
        };
        xhr.open('POST', '/post/img');
        xhr.send(formData);
      });
    }


    document.querySelectorAll('.twit-follow').forEach(function (tag) {
      tag.addEventListener('click', function () {
        var isLoggedIn = document.querySelector('#my-id');
        if (isLoggedIn) {
          var userId = tag.parentNode.querySelector('.twit-user-id').value;
          var myId = isLoggedIn.value;
          if (userId !== myId) {
            if (confirm('팔로잉하시겠습니까?')) {
              var xhr = new XMLHttpRequest();
              xhr.onload = function () {
                if (xhr.status === 200) {
                  location.reload();
                } else {
                  console.error(xhr.responseText);
                }
              };
              
              // userID 는 팔로우 하려는 아이디 (자기자신이 아닌)
              
              xhr.open('POST', '/user/' + userId + '/follow');
              xhr.send();
            }
          }
        }
      });
    });

    document.querySelectorAll('.twit-unfollow').fuserch(function (tag) {
      tag.addEventListener('click', function () {user
        var isLoggedIn = document.querySelector('#my-id');
        if (isLoggedIn) {
          var userId = tag.parentNode.querySelector('.twit-user-id').value;
          var myId = isLoggedIn.value;
          if (userId !== myId) {
            if (confirm('팔로잉 안 하시겠습니까?')) {
              var xhr = new XMLHttpRequest();
              xhr.onload = function () {
                if (xhr.status === 200) {
                  location.reload();
                } else {
                  console.error(xhr.responseText);
                }
              };
              
              // userID 는 팔로우 하려는 아이디 (자기자신이 아닌)
              
              xhr.open('POST', '/user/' + userId + '/unfollow');
              xhr.send();
            }
          }
        }
      });
    });


    document.querySelectorAll('.like').forEach(function (tag) {
      tag.addEventListener('click', function () {
        var isLoggedIn = document.querySelector('#my-id');
        var twitID = tag.parentNode.querySelector('.twit-id').value;   
        if (isLoggedIn) {
              var xhr = new XMLHttpRequest();
              xhr.onload = function () {
                if (xhr.status === 200) {
                  location.reload();
                } else {
                  console.error(xhr.responseText);
                }
              };
              
              // userID 는 팔로우 하려는 아이디 (자기자신이 아닌)
              
              xhr.open('POST', '/post/' + twitID + '/like');
              xhr.send();
          
        }
      });
    });

    document.querySelectorAll('.unlike').forEach(function (tag) {
      tag.addEventListener('click', function () {
        var isLoggedIn = document.querySelector('#my-id');
        var twitID = tag.parentNode.querySelector('.twit-id').value;   
        if (isLoggedIn) {
              var xhr = new XMLHttpRequest();
              xhr.onload = function () {
                if (xhr.status === 200) {
                  location.reload();
                } else {
                  console.error(xhr.responseText);
                }
              };
              
              // userID 는 팔로우 하려는 아이디 (자기자신이 아닌)
              
              xhr.open('DELETE', '/post/' + twitID + '/like');
              xhr.send();
          
        }
      });
    });

     document.querySelectorAll('.delete').forEach(function (tag) {
      tag.addEventListener('click', function () {
        var isLoggedIn = document.querySelector('#my-id');
        var twitID = tag.parentNode.querySelector('.twit-id').value;   
        if (isLoggedIn) {
          
          // userID 는 게시글 작정자 아이디.
          var userId = tag.parentNode.querySelector('.twit-user-id').value;
          var myId = isLoggedIn.value;
          if (userId === myId) {
            if (confirm('삭제 하시겠습니까?')) {
              var xhr = new XMLHttpRequest();
              xhr.onload = function () {
                if (xhr.status === 200) {
                  location.reload();
                } else {
                  console.error(xhr.responseText);
                }
              };
              
              // userID 는 팔로우 하려는 아이디 (자기자신이 아닌)
              
              xhr.open('DELETE', '/post/' + twitID );
              xhr.send();
            }
            }
        }
      });
    });


